const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function getDraftListDB(workspace_id){
    try{
        const draft = await prisma.form_draft.findMany({
            where: {
                workspace_id: workspace_id
            }
        });
        const draftList = [];
        if(draft){
            console.log(draft);
            for(let i=0;i<draft.length;i++){
                draftList.push({
                    id: draft[i].id.toString(),
                    name: draft[i].draft.STUDENT_NAME.text,
                    roll: draft[i].draft.ROLL.text,
                });
            }
            return draftList;
        }
        return false;
    }
    catch(err){
        console.log(`Error getting draft: ${err}`);
        return false;
    }
}

async function getDraftFormDB(id){
    try{
        const draft = await prisma.form_draft.findUnique({
            where: {
                id: id
            }
        });

        const form_id = draft.form_id;
        const form_url = await prisma.pdf.findUnique({
            where: {
                form_id: form_id
            }
        });
        
        if(draft && form_url){
            return {
                url: form_url.url,
                draft: draft.draft,
                form_id: form_id
            }
        }
        return false;
    }
    catch(err){
        console.log(`Error getting draft: ${err}`);
        return false;
    }
}


async function updateDraftPageOneDB(id,form){
    try{
        const draft = await prisma.form_draft.update({
            where: {
                id: id
            },
            data: {
                draft: form
            }
        });
        if(draft){
            return true;
        }
        return false;
    }
    catch(err){
        console.log(`Error updating draft: ${err}`);
        return false;
    }
    finally{
        await prisma.$disconnect();
    }
}



module.exports = {
    getDraftListDB,
    getDraftFormDB,
    updateDraftPageOneDB
}